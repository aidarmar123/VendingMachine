@page "/Login"
@using Microsoft.AspNetCore.Localization
@using Microsoft.Extensions.Localization
@using System.Text
@using System.Security.Cryptography
@layout AuthorizationLayout
@inject NavigationManager navigationManager
@inject IHttpContextAccessor HttpContextAccessor
@inject IStringLocalizer<Resource> Localizer
<PageTitle>@Localizer["Login"]</PageTitle>

<EditForm FormName="Authorize" Model="contextUser" OnValidSubmit="Login">
	<DataAnnotationsValidator />
	<Microsoft.AspNetCore.Components.Forms.ValidationSummary />
	<div class="form-center">
		<div>
			<label>
				@Localizer["Email"]:
			</label>
			<br/>
			<InputText @bind-Value="@contextUser.Email" />
		</div>
		<div>
			<label>
				@Localizer["Password"]:
			</label>
			<br />

			<InputText @bind-Value="@contextUser.Password" />
		</div>
		<Button Type="ButtonType.Submit">@Localizer["Login"]</Button>
		<Button Clicked="Registration">@Localizer["Sign Up"]</Button>
	</div>
</EditForm>
@code {
	[Inject] IMessageService messageService { get; set; }
	[Inject] IJSRuntime JS { get; set; }
	LoginUser contextUser { get; set; } = new LoginUser();

	Timer timer { get; set; }
	private void Registration(MouseEventArgs args)
	{
		navigationManager.NavigateTo("/Registration");
	}
	private async Task Login(EditContext args)
	{
		var password = contextUser.Password;
		var bytePassword = Encoding.UTF8.GetBytes(password);
		var hashMD5 = MD5.Create().ComputeHash(bytePassword);
		var sb = new StringBuilder();
		foreach(var item in hashMD5)
		{
			sb.Append(item.ToString("X2"));
		}
		password = sb.ToString();
		var response = await NetManager.Authorization(contextUser.Email, password);
		if (response.IsSuccessStatusCode)
		{
			UserServices.AuthUser = (await NetManager.ParseResponse<GetToken>(response)).contextUser;
			await DataManager.InitData();

			navigationManager.NavigateTo("/");
		}else if(response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
		{
			await ShowMessage("Пользоватлеь не найден");
		}
	}
	private Task ShowMessage(string msg)
	{
		return messageService.Error(msg,"Error");
	}
	private async Task SetRussia(MouseEventArgs args)
	{
		await JS.InvokeVoidAsync("setCulture", "ru");
		StateHasChanged();
	}
	private async Task SetEnglish(MouseEventArgs args)
	{
		await JS.InvokeVoidAsync("setCulture", "en");
		StateHasChanged();

	}
}
<style>
	
</style>
<script>
	function setCulture(culture) {
		document.cookie = `.AspNetCore.Culture=c=${culture}|uic=${culture}; path=/`;
		location.reload();
	}
</script>