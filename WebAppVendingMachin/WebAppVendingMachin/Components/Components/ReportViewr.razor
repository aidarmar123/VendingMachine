@using System.Text
@inject IJSRuntime JS
@inject IStringLocalizer<Resource> Localizer
<h3>ReportViewr</h3>
@if (contextReport.ReportData != null)
{
	<Blazorise.PdfViewer.PdfViewerContainer>
		<Button Clicked="@(()=>pdfViewr.PreviousPage())">⬅</Button>
		<Button Clicked="@(()=>pdfViewr.NextPage())">➡</Button>
		<Blazorise.PdfViewer.PdfViewer @ref="pdfViewr" Source='@($"data:application/pdf;base64,{Convert.ToBase64String(contextReport.ReportData)}")'></Blazorise.PdfViewer.PdfViewer>
	</Blazorise.PdfViewer.PdfViewerContainer>
}

<canvas id="signatureCanvas" width="400" height="200" style="border:1px solid #000;"></canvas>
<Button Clicked="Test">Test</Button>
<Button Clicked="Signing">@Localizer["Signing"]</Button>
@code {
	PdfViewer pdfViewr;



	[Parameter] public Report contextReport { get; set; }
	[Inject] IModalService modalService { get; set; }
	[Inject] IToastService toastService { get; set; }
	protected override void OnParametersSet()
	{
		if (contextReport.ReportData == null)
		{
			contextReport.ReportData = CreateReport.GetReportPDF(contextReport);
		}
	}


	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await JS.InvokeVoidAsync("initSignaturePad");
		}
	}
	private async Task Signing(MouseEventArgs args)
	{
		var sign = await JS.InvokeAsync<string>("getSignatureImage");
		contextReport.ReportData = CreateReport.InsertSign(contextReport.ReportData, Convert.FromBase64String(sign.Split(',')[1]));
		await InvokeAsync(StateHasChanged);



		contextReport.DateSigning = DateTime.Now;
		await NetManager.Put($"api/Reports/{contextReport.Id}", contextReport);
		await modalService.Hide();

		string contentNotification = "Документ создан";
		await NetManager.Post("api/CenterNotifications", new CenterNotification()
			{
				DateTime = DateTime.Now,
				Notification = contentNotification,
				UserId = UserServices.AuthUser.Id
			});
		await toastService.Success(contentNotification);
	}
	private async Task Test(MouseEventArgs args)
	{

	}
}
<script>
	  window.initSignaturePad = function () {
		const canvas = document.getElementById("signatureCanvas");
		const ctx = canvas.getContext("2d");

		let drawing = false;

		const getPosition = (e) => {
			const rect = canvas.getBoundingClientRect();
			return {
				x: (e.clientX || e.touches[0].clientX) - rect.left,
				y: (e.clientY || e.touches[0].clientY) - rect.top
			};
		};

		const startDrawing = (e) => {
			drawing = true;
			const pos = getPosition(e);
			ctx.beginPath();
			ctx.moveTo(pos.x, pos.y);
			e.preventDefault();
		};

		const draw = (e) => {
			if (!drawing) return;
			const pos = getPosition(e);
			ctx.lineTo(pos.x, pos.y);
			ctx.stroke();
			e.preventDefault();
		};

		const stopDrawing = () => {
			drawing = false;
		};

		// Mouse events
		canvas.addEventListener("mousedown", startDrawing);
		canvas.addEventListener("mousemove", draw);
		canvas.addEventListener("mouseup", stopDrawing);
		canvas.addEventListener("mouseleave", stopDrawing);

		// Touch events
	};

	window.getSignatureImage=function(){
		const canvas = document.getElementById("signatureCanvas")
		if(canvas){
			return canvas.toDataURL();
		}
		return "";
	}


</script>